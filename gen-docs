#!/usr/bin/env raku

use lib 'lib';
use Termie::Commands;

sub to-url(Str $file,Int $line) {
  'https://github.com/bduggan/termie/blob/master/'
    ~ $file
    ~ '#L'
    ~ $line;
}

sub esc($str) {
 return $str if $str.?escaped.html;
 $str.trans( [ '<'   , '>'   , '&' ] =>
             [ '&lt;', '&gt;', '&amp;' ])
}

multi tag($name,$content) {
  tag($name,{},$content);
}

multi tag($name,%attrs={},$content='') {
  return
  '<' ~ $name
      ~ join ' ', %attrs.kv.map({qq[ $^key="$^value"]})
      ~ '>'
      ~ $content
      ~ '</'
      ~ $name
      ~ '>';
}

sub h2($str) {
  return "## $str" unless $*html;
  tag('h2',$str);
}

sub h3($str) {
  return "### $str" unless $*html;
  tag('h3',$str);
}

sub dl-start {
  return '```' unless $*html;
  return '<dl>';
}

sub dl-end {
  return '```' unless $*html;
  return '</dl>';
}

sub hr {
  return "---" unless $*html;
  return '<hr>';
}

sub rel-file($f) {
  $f.IO.relative('.').subst(/' (' [ \w | ':' ]+ ')' $/,'');
}

sub show-command($h) {
  if !$*html {
    say $h<text>;
    return;
  }
  with $h<file> -> $f {
     say tag('dt',
            ~tag('a',{href => to-url(rel-file($f), +$h<line>)}, '\\' ~ esc($h<cmd>))
         );
     say tag('dd', esc($h<desc>));
  } else {
     say tag('dt', '\\' ~ esc($h<cmd>));
     say tag('dd', esc($h<desc>));
  }
}

unit sub MAIN(Bool :$*html, Str :$cmd = '');

my @help = Termie::Commands.new.generate-help($cmd);

my %c = @help.classify: { $^line.<text> ~~ / ^^ \s* '\script '/ ?? 'script' !! 'interactive' };

say h2("Currently supported commands");
say "";

say h2("Interactive");
say "";
say "In interactive mode these commands are supported:";
say "";
say dl-start;

for %c<interactive>.sort(*.<text>) -> $h {
  unless $h<cmd> {
     note "missing something " ~ $h.raku;
     next;
  }
  next if $cmd && $h<cmd> !~~ /$cmd/;
  show-command($h);
}
say dl-end;
say h3("Scripts");
say "";
say "In scripting mode, these additional commands are supported:";
say "";
say dl-start;
for %c<script>.sort(*.<text>) -> $h {
   next if $cmd;
   $h<text> .= subst(/script \s* /,'');
   $h<cmd> .= subst(/script \s* /,'');
   show-command($h);
}
say dl-end;
say "";
say hr;
say "";
say "For more verbose descriptions of these commands, please refer to the source code!";

